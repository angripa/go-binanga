// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "binanga/internal/merchant/model"
)

// MerchantDB is an autogenerated mock type for the MerchantDB type
type MerchantDB struct {
	mock.Mock
}

// RunInTx provides a mock function with given fields: ctx, f
func (_m *MerchantDB) RunInTx(ctx context.Context, f func(context.Context) error) error {
	ret := _m.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for RunInTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveMerchant provides a mock function with given fields: ctx, merchant
func (_m *MerchantDB) SaveMerchant(ctx context.Context, merchant *model.Merchant) error {
	ret := _m.Called(ctx, merchant)

	if len(ret) == 0 {
		panic("no return value specified for SaveMerchant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Merchant) error); ok {
		r0 = rf(ctx, merchant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMerchantDB creates a new instance of MerchantDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMerchantDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MerchantDB {
	mock := &MerchantDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
